#!/usr/bin/env bash

#
# steamtricks provides workarounds for problems with Steam on Linux
#

# build-time constants
STEAMTRICKS_VERSION="development"
STEAMTRICKS_SCRIPT="$(cd "${0%/*}" && echo "$PWD")/${0##*/}"
STEAMTRICKS_DIR="$(dirname "$STEAMTRICKS_SCRIPT")"
STEAMTRICKS_DATA_DIR=/usr/share/steamtricks
STEAMTRICKS_DATA_REPO_DIR="$STEAMTRICKS_DATA_DIR/data"
PID_FILE=~/.steamtrickspid
CONFIG_DIR=~/.local/share/steamtricks
CONFIG_RC="$CONFIG_DIR/steamtricksrc"
STEAM_LIB_PREFIX=/usr/lib/steam
STEAM_OPENSSL_REPLACE=1
STEAM_DIR=~/.local/share/Steam
STEAM_RUNTIME=$STEAM_DIR/ubuntu12_32/steam-runtime

# config defaults
C_DATA_DIR=
C_NOTIFICATION=1
C_NOTIFICATION_CLEAN=1
C_NOTIFICATION_FIX_APPLY=1
C_NOTIFICATION_FIX_FETCH=1
C_STEAM_STARTUP_MAX=120

_C_VERSION=20161005


notify()
{
  eval local toggle=\$$"C_NOTIFICATION_$1"
  if test "$C_NOTIFICATION" == 1 && test "$toggle" == 1 ; then
    notify-send "steamtricks" "$2" --icon=steam
  fi
}

strip_quotes()
{
  local clean="$1"
  clean="${clean%\"}"
  clean="${clean#\"}"
  echo "$clean"
}

keyvalue_parse()
{
  local file="$1"
  local match="$2"

  local section=()
  local previous
  local previous_consumed=0
  local IFS=$'\t\n'
  for line in $(< "$file") ; do
    line=$(strip_quotes "$line")
    case $line in
      \{) section+=("$previous") ;;
      \}) unset section[${#section[@]}-1] ;;
      *)
      if [[ "$previous" != "" && "$previous" != "{" && "$previous" != "}" ]] ; then
        if [ $previous_consumed -eq 1 ] ; then
          previous_consumed=0
        else
          IFS='_'; echo "${section[*]}_$previous='$line'"
          previous_consumed=1
        fi
      fi
      ;;
    esac
    previous=$line
  done
}

steam_library_directories()
{
  echo "parsing libraryfolders.vdf..." >&2
  echo "$STEAM_DIR/steamapps"
  (
    eval $(keyvalue_parse "$STEAM_DIR/steamapps/libraryfolders.vdf")
    for var in $(compgen -A variable | grep -E "LibraryFolders_[0-9]+$") ; do
      eval echo \$$var/steamapps
    done
  )
}

steam_app_manifest()
{
  local appid=$1
  local manifest
  local IFS=$'\n' # allow for spaces in directories
  for dir in $(steam_library_directories) ; do
    manifest="$dir/appmanifest_$appid.acf"
    if [ -f "$manifest" ] ; then
      echo "$manifest"
      break
    fi
  done
}

steamtricks_fix_fetch()
{
  notify FIX_FETCH "fetching fix for app $1"
}

steamtricks_fix_apply()
{
  local app_id=$1
  local manifest=$(steam_app_manifest $app_id)
  if [[ -z "$manifest" ]] ; then
    echo "no manifest found for app $app_id"
    return 1
  fi

  eval $(keyvalue_parse "$manifest")
  local app_name="$AppState_name"
  local app_dir="$(dirname "$manifest")/common/$AppState_installdir"

  local failed=0
  local removed=$(remove_incompatible_files "$app_dir")
  local applied=0

  local data_dir="$STEAMTRICKS_DATA_REPO_DIR/$app_id-*"
  data_dir=$(echo $data_dir) # evaluate the glob
  if [ -d "$data_dir" ] ; then
    echo "found $data_dir..."
    cd "$app_dir"
    if [ ! $? -eq 0 ] ; then
      echo "unable to enter app_dir"
      return 1
    fi

    streamtricks_fix_script "$data_dir/00-pre"
    if [ $? -eq 1 ] ; then
      failed=1
    fi

    if [ -f "$data_dir/remove" ] ; then
      ((removed+=$(rm -v $(cat "$data_dir/remove") | tee /dev/stderr | wc -l)))
      failed=$?
    fi

    # could pipe the list of patches, but loose access to variable state
    local IFS=$'\n' # allow for spaces in directories
    for patch in $(find "$data_dir" -type f -name "*.patch") ; do
      echo "patch $patch..."
      patch -p1 --dry-run --unified --forward -i "$patch"
      if [ $? -eq 0 ] ; then
        patch -p1 --unified --forward -i "$patch"
      else
        patch -t -p1 --dry-run --unified --reverse -i "$patch"
      fi

      if [ $? -eq 0 ] ; then
        ((applied++))
      else
        failed=1
      fi
    done

    streamtricks_fix_script "$data_dir/99-post"
    if [ $? -eq 1 ] ; then
      failed=1
    fi

    # prints directory to which it changes
    cd - > /dev/null
  elif [ $removed -eq 0 ] ; then
    echo "no changes made"
    return 0
  fi

  local status
  if [ $failed -eq 0 ] ; then
    status=success
  else
    status=failure
  fi

  local message="app: $app_name, result: $status, removed: $removed, applied: $applied"
  echo "$message"
  notify FIX_APPLY "$message"
}

streamtricks_fix_script()
{
  local script="$1"
  if [ -f "$script" ] ; then
    echo "executing $script"
    "$script"
    if [ ! $? -eq 0 ] ; then
      echo "-> script failed"
      return 1
    fi
  fi
  return 0
}

# Many apps also ship a libstdc that causes issues in the same way the steam
# runtime version of the lib does. As such parse the config to get a list of
# library folders to search and remove such files. An example of a game that
# will not launch without this fix is Portal 2 (app 620). Unfortunately, there
# does not appear to be a method for running the script after a game has
# downloaded or before it launches so at best a steam restart will work.
remove_incompatible_files()
{
  echo "removing troublesome files..." >&2
  local IFS=$'\n' # allow for spaces in directories
  local count=0
  for dir in $*; do
    echo "-> checking $dir" >&2
    ((count+=$(find "$dir" -type f -name "libstdc*" -print -delete | tee /dev/stderr | wc -l)))
  done
  echo $count
}

# TODO replace with bootstrap phase watching
remove_incompatible_files_runtime()
{
  local count=$(remove_incompatible_files $STEAM_RUNTIME)
  if [ $count -gt 0 ] ; then
    notify CLEAN "$count troublesome file(s) removed from steam-runtime"
  fi
}

steam_content_log_watch()
{
  echo -n "waiting for steam to start..."
  local tries=0
  until pgrep -xo steam > /dev/null ; do
    if [ $((tries++)) -eq $C_STEAM_STARTUP_MAX ] ; then
     echo "failed after $C_STEAM_STARTUP_MAX seconds"
     exit 1
    fi
    sleep 1
  done
  echo "done"

  tail --pid $(pgrep -xo steam) -fn0 "$STEAM_DIR/logs/content_log.txt" | \
  while read line ; do
    # steam prints CRLF into log files (issue #4646)
    # for some reason this does not work when chained above
    line=$(echo "$line" | tr -d '\r')

    echo "$line" | grep "state changed : Update Required,$" > /dev/null
    if [ $? = 0 ] ; then
      local parts=($line)
      steamtricks_fix_fetch ${parts[3]}
    fi

    echo "$line" | grep "state changed : Fully Installed,Update Running,$" > /dev/null
    if [ $? = 0 ] ; then
      local parts=($line)
      steamtricks_fix_apply ${parts[3]}
    fi
  done

  echo "steam quit, exit"
}

steam_lib_replace()
{
  local replacement="$STEAM_LIB_PREFIX/$1"
  local original="$2"

  if [ ! -L "$original" ] && [ -f "$replacement" ] ; then
    rm "$original"
    ln -s "$replacement" "$original"
    echo "-> replace $original with $replacement"
  fi
}

steam_openssl_replace()
{
  echo "replacing steam-runtime openssl libraries..."
  for lib in libcrypto.so.1.0.0 libssl.so.1.0.0 ; do
    find "$STEAM_RUNTIME/i386" -name $lib | while read found
    do
      steam_lib_replace "lib/$lib" "$found"
    done

    find "$STEAM_RUNTIME/amd64" -name $lib | while read found
    do
      steam_lib_replace "lib64/$lib" "$found"
    done
  done
}

steamtricks_data_dir()
{
  # check for config override, but allow git to win
  if [ ! -z "$C_DATA_DIR" ] ; then
    STEAMTRICKS_DATA_REPO_DIR="$C_DATA_DIR"
  fi

  # automatically use development copy if running out of git tree
  if [ -d "$STEAMTRICKS_DIR/../.git" ] && [ -d "$STEAMTRICKS_DIR/../data" ] ; then
    STEAMTRICKS_DATA_REPO_DIR="$STEAMTRICKS_DIR/../data"
  fi
}

steamtricks_config()
{
  if [ ! -d "$CONFIG_DIR" ] ; then
    mkdir -p "$CONFIG_DIR"
  fi

  if [ -e "$CONFIG_RC" ] ; then
    source "$CONFIG_RC"
    if [ -z "$C_VERSION" ] || [ $C_VERSION -lt $_C_VERSION ] ; then
      C_VERSION=$_C_VERSION
      # config is already loaded, remove config and re-write
      rm "$CONFIG_RC"
    fi
  fi

  if [ ! -e "$CONFIG_RC" ] ; then
    steamtricks_config_print > "$CONFIG_RC"
  fi
}

steamtricks_config_print()
{
  echo "#!/usr/bin/env bash"
  echo "# $(date)"
  echo

  ( set -o posix ; set ) | grep ^C_
}

steamtricks_usage()
{
  cat <<_EOF_
Usage: $0 [options] command

Options:
-f, --force           Force launch by removing pid file
    --watch           Watch Steam logs for relevant activity
-h, --help            Display this message and exit

Commands:
clean                 Clean steam-runtime and steamapps directories
_EOF_
}

steamtricks_handle_option()
{
  case "$1" in
    --version) echo "$STEAMTRICKS_VERSION"; exit 0; ;;
    -f|--force) rm  -f -- "$PID_FILE" ;;
    --watch) STEAMTRICKS_WATCH=1 ;;
    -h|--help) steamtricks_usage ; exit 0 ;;
    -*) echo "unknown option $1" ; exit 1 ;;
    *) return 1 ;;
  esac
  return 0
}

while steamtricks_handle_option $1 ; do
  shift
done

# pid file to detect already running
if [ -f "$PID_FILE" ] ; then
  echo "already running"
  exit 1
fi
trap "rm -f -- '$PID_FILE'" EXIT
echo $$ > "$PID_FILE"

# initial boot
steamtricks_config
remove_incompatible_files_runtime
if test "$STEAM_OPENSSL_REPLACE" == 1 ; then
  steam_openssl_replace
fi

# watch phase
steamtricks_data_dir
if test "$STEAMTRICKS_WATCH" == 1 ; then
  steam_content_log_watch
fi
